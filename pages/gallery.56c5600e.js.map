{"mappings":"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;oBACE,OAAO,IAAI,EAAA,CAAA,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAzC;iBACD,CAAD;gBAEA,OAAA,CAAA,SAAA,CAAA,UAAU,GAAV,SAAY,EAAsB,EAAlC;oBACE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAlC;iBACD,CAAD;gBACA,OAAA,CAAA,SAAA,CAAA,WAAW,GAAX,SAAa,EAAsB,EAAnC;oBACE,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAlC;iBACD,CAAD;gBACF,OAAA,OAAC,CAAD;aAAC,EAAD,AAAA,AAAA;Y,O,C,O,G,Q,C;Q,K,E;Q,O,C,K,C,S,M,E,O,E,mB,E;Y,Y,C;Y,I,S,G,A,I,I,I,C,S,I,A,W;gB,I,a,G,S,E,E,E,E;oB,a,G,M,C,c,I,C;wB,S,E,E;qB,C,Y,K,I,S,C,E,C,E;wB,C,C,S,G,C,C;qB,I,S,C,E,C,E;wB,I,I,C,I,C,C,I,C,C,c,C,C,C,E,C,C,C,C,G,C,C,C,C,C;qB,C;oB,O,a,C,E,E,E,C,C;iB,A;gB,O,S,C,E,C,E;oB,a,C,C,E,C,C,C;oB,S,E,G;wB,I,C,W,G,C,C;qB;oB,C,C,S,G,C,K,I,G,M,C,M,C,C,C,G,C,E,C,S,G,C,C,S,E,I,E,E,C,A,C;iB,C;a,E,A;Y,M,C,c,C,O,E,Y,E;gB,K,E,I;a,C,C;YCzFA,IAAA,OAAA,GAAA,mBAAA,CAAA,CAAA,CAAA,AAMuB;YAEvB,SAAS,aAAa,CAAE,GAAW,EAAnC;gBACE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,AAAnC;gBACA,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,IACrC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,IACxB,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAxB;aACH;YAED,SAAS,YAAY,CAAE,CAAS,EAAE,CAAS,EAA3C;gBACE,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,AAAnB;gBACA,IAAI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,O,E,U,E,C,E,S,E;gB,S,K,C,K,E;oB,O,K,Y,C,G,K,G,I,C,C,S,O,E;wB,O,C,K,C,C;qB,C,C;iB;gB,O,I,C,C,I,C,C,G,O,C,A,C,C,S,O,E,M,E;oB,S,S,C,K,E;wB,I;4B,I,C,S,C,I,C,K,C,C,C;yB,C,O,C,E;4B,M,C,C,C,C;yB;qB;oB,S,Q,C,K,E;wB,I;4B,I,C,S,C,O,C,C,K,C,C,C;yB,C,O,C,E;4B,M,C,C,C,C;yB;qB;oB,S,I,C,M,E;wB,M,C,I,G,O,C,M,C,K,C,G,K,C,M,C,K,C,C,I,C,S,E,Q,C,C;qB;oB,I,C,A,C,S,G,S,C,K,C,O,E,U,I,E,C,C,C,I,E,C,C;iB,C,C;a,A;Y,I,W,G,A,I,I,I,C,W,I,S,O,E,I,E;gB,I,C,G;oB,K,E,C;oB,I,E,W;wB,I,C,C,C,C,G,C,E,M,C,C,C,C,C;wB,O,C,C,C,C,C;qB;oB,I,E,E;oB,G,E,E;iB,E,C,E,C,E,C,E,C,A;gB,O,C,G;oB,I,E,I,C,C,C;oB,O,E,I,C,C,C;oB,Q,E,I,C,C,C;iB,E,O,M,K,U,I,C,C,C,M,C,Q,C,G,W;oB,O,I,C;iB,C,A,E,C,C;gB,S,I,C,C,E;oB,O,S,C,E;wB,O,I,C;4B,C;4B,C;yB,C,C;qB,C;iB;gB,S,I,C,E,E;oB,I,C,E,M,I,S,C,iC,C,C;oB,M,C,C,I;wB,I,C,G,C,E,C,I,C,C,G,E,C,C,C,G,C,G,C,C,Q,C,G,E,C,C,C,G,C,C,O,C,I,C,A,C,C,G,C,C,Q,C,C,I,C,C,I,C,C,C,E,C,C,A,G,C,C,I,C,I,C,A,C,C,G,C,C,I,C,C,E,E,C,C,C,C,C,C,I,E,O,C,C;wB,I,C,G,C,E,C,E,E,G;4B,E,C,C,C,G,C;4B,C,C,K;yB,C;wB,O,E,C,C,C;4B,K,C,C;4B,K,C;gC,C,G,E,C;gC,M;4B,K,C;gC,C,C,K,E,C;gC,O;oC,K,E,E,C,C,C;oC,I,E,K;iC,C;4B,K,C;gC,C,C,K,E,C;gC,C,G,E,C,C,C,C;gC,E,G;A,qC;iC,C;gC,S;4B,K,C;gC,E,G,C,C,G,C,G,E,C;gC,C,C,I,C,G,E,C;gC,S;4B;gC,I,C,C,C,G,C,C,I,E,C,G,C,C,M,G,C,I,C,C,C,C,M,G,C,C,C,A,I,C,E,C,C,C,K,C,I,E,C,C,C,K,C,C,A,E;oC,C,G,C,C;oC,S;iC;gC,I,E,C,C,C,K,C,I,C,C,C,I,E,C,C,C,G,C,C,C,C,I,E,C,C,C,G,C,C,C,C,A,C,A,E;oC,C,C,K,G,E,C,C,C,C;oC,M;iC;gC,I,E,C,C,C,K,C,I,C,C,K,G,C,C,C,C,E;oC,C,C,K,G,C,C,C,C,C;oC,C,G,E,C;oC,M;iC;gC,I,C,I,C,C,K,G,C,C,C,C,E;oC,C,C,K,G,C,C,C,C,C;oC,C,C,G,C,I,C,E,C,C;oC,M;iC;gC,I,C,C,C,C,E,C,C,G,C,G,E,C;gC,C,C,I,C,G,E,C;gC,S;yB;wB,E,G,I,C,I,C,O,E,C,C,C;qB,C,O,C,E;wB,E,G;A,6B;4B,C;yB,C;wB,C,G,C,C;qB,Q;wB,C,G,C,G,C,C;qB;oB,I,E,C,C,C,G,C,E,M,E,C,C,C,C;oB,O;wB,K,E,E,C,C,C,G,E,C,C,C,G,K,C;wB,I,E,I;qB,C;iB;a,A;Y,M,C,c,C,O,E,Y,E;gB,K,E,I;a,C,C;Y,O,C,a,G,O,C,K,G,K,C,C;YChQA,IAAA,OAAA,GAAA,mBAAA,CAAA,CAAA,CAAA,AAAwD;YAKxD,IAAA,MAAA,GAAA,aAAA,CAAA,WAAA;gBAEE,SAAA,KAAA,CAAuB,QAAuB,EAA9C;oBAAuB,IAAA,CAAA,QAAQ,GAAR,QAAQ,CAAe;oBADtC,IAAA,CAAA,IAAI,GAA0B,EAAE,CAAhC;iBAC2C;gBACnD,KAAA,CAAA,SAAA,CAAA,KAAK,GAAL,WAAA;oBACE,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAA7B;iBACD,CAAD;gBACA,KAAA,CAAA,SAAA,CAAA,GAAG,GAAH,SAAK,IAAY,EAAjB;oBACE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAxB;iBACD,CAAD;gBACA,KAAA,CAAA,SAAA,CAAA,GAAG,GAAH,SAAK,IAAY,EAAjB;oBACE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAtB;iBACD,CAAD;gBACA,KAAA,CAAA,SA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","sources":["node_modules/node-vibrant/dist/vibrant.js","node_modules/node-vibrant/dist/webpack:/Vibrant/webpack/universalModuleDefinition","node_modules/node-vibrant/dist/webpack:/Vibrant/webpack/bootstrap","node_modules/node-vibrant/dist/webpack:/vibrant-core/src/utils.ts","node_modules/node-vibrant/dist/webpack:/vibrant-core/src/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-image/src/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-color/src/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-color/src/converter.ts","node_modules/node-vibrant/dist/webpack:/Vibrant/src/browser.ts","node_modules/node-vibrant/dist/webpack:/Vibrant/src/config.ts","node_modules/node-vibrant/dist/webpack:/vibrant-core/src/options.ts","node_modules/node-vibrant/dist/webpack:/vibrant-core/src/builder.ts","node_modules/node-vibrant/dist/webpack:/vibrant-image-browser/src/index.ts","node_modules/node-vibrant/dist/webpack:/Vibrant/src/bundle.ts","node_modules/node-vibrant/dist/webpack:/Vibrant/src/pipeline/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-quantizer-mmcq/src/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-quantizer-mmcq/src/vbox.ts","node_modules/node-vibrant/dist/webpack:/vibrant-image/src/histogram.ts","node_modules/node-vibrant/dist/webpack:/vibrant-quantizer-mmcq/src/pqueue.ts","node_modules/node-vibrant/dist/webpack:/vibrant-generator-default/src/index.ts","node_modules/node-vibrant/dist/webpack:/vibrant-core/src/pipeline/index.ts"],"sourcesContent":[null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vibrant\"] = factory();\n\telse\n\t\troot[\"Vibrant\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","export function mapValues<T, R> (o: { [key: string]: T }, mapper: (v: T) => R): { [key: string]: R } {\n  let result: { [key: string]: R } = {}\n\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      const v = o[key]\n      result[key] = mapper(v)\n    }\n  }\n\n  return result\n}\n\n/**\n * Overwrite values or properties on objects and lists recursively.\n * A shallow copy will be created for each array value.\n */\nexport function assignDeep<T> (target: Partial<T>, ...sources: (Partial<T> | undefined)[]): T {\n  sources.forEach(s => {\n    if (!s) return\n    for (const key in s) {\n      if (s.hasOwnProperty(key)) {\n        const v = s[key] as any\n        if (Array.isArray(v)) {\n          // Shallow copy\n          target[key] = v.slice(0) as any\n        } else if (typeof v === 'object') {\n          if (!target[key]) target[key] = {} as any\n          assignDeep<any>(target[key] as any, v)\n        } else {\n          target[key] = v\n        }\n      }\n    }\n  })\n  return target as T\n}\n","import { Options, buildProcessOptions } from './options'\nimport { Callback } from '@vibrant/types'\nimport { Image, ImageSource } from '@vibrant/image'\n\nimport { Filter, Palette, Swatch } from '@vibrant/color'\n\nimport Builder from './builder'\nimport { Pipeline, ProcessOptions, ProcessResult } from './pipeline'\nimport { assignDeep } from './utils'\n\nexport interface VibrantStatic {\n  from (src: ImageSource): Builder\n}\n\nexport default class Vibrant {\n  private _result: ProcessResult\n  private static _pipeline: Pipeline\n  static use (pipeline: Pipeline) {\n    this._pipeline = pipeline\n  }\n  static DefaultOpts: Partial<Options> = {\n    colorCount: 64,\n    quality: 5,\n    filters: []\n  }\n\n  static from (src: ImageSource): Builder {\n    return new Builder(src)\n  }\n\n  get result () {\n    return this._result\n  }\n\n  opts: Options\n  constructor (private _src: ImageSource, opts?: Partial<Options>) {\n    this.opts = assignDeep({}, Vibrant.DefaultOpts, opts)\n  }\n  private _process (\n    image: Image,\n    opts?: Partial<ProcessOptions>\n  ): Promise<ProcessResult> {\n    let { quantizer } = this.opts\n\n    image.scaleDown(this.opts)\n\n    let processOpts = buildProcessOptions(this.opts, opts)\n\n    return Vibrant._pipeline.process(image.getImageData(), processOpts)\n  }\n  palette (): Palette {\n    return this.swatches()\n  }\n  swatches (): Palette {\n    throw new Error(\n      'Method deprecated. Use `Vibrant.result.palettes[name]` instead'\n    )\n  }\n\n  getPalette (name: string, cb?: Callback<Palette>): Promise<Palette>\n  getPalette (cb?: Callback<Palette>): Promise<Palette>\n  getPalette (): Promise<Palette> {\n    const arg0 = arguments[0]\n    const arg1 = arguments[1]\n    const name = typeof arg0 === 'string' ? arg0 : 'default'\n    const cb = typeof arg0 === 'string' ? arg1 : arg0\n    let image = new this.opts.ImageClass()\n    return image\n      .load(this._src)\n      .then(image => this._process(image, { generators: [name] }))\n      .then(result => {\n        this._result = result\n        return result.palettes[name]\n      })\n      .then(res => {\n        image.remove()\n        if (cb) {\n          cb(undefined, res)\n        }\n        return res\n      })\n      .catch(err => {\n        image.remove()\n        if (cb) {\n          cb(err)\n        }\n        return Promise.reject(err)\n      })\n  }\n  getPalettes (\n    names: string[],\n    cb?: Callback<Palette>\n  ): Promise<{ [name: string]: Palette }>\n  getPalettes (cb?: Callback<Palette>): Promise<{ [name: string]: Palette }>\n  getPalettes (): Promise<{ [name: string]: Palette }> {\n    const arg0 = arguments[0]\n    const arg1 = arguments[1]\n    const names = Array.isArray(arg0) ? arg0 : ['*']\n    const cb = Array.isArray(arg0) ? arg1 : arg0\n    let image = new this.opts.ImageClass()\n    return image\n      .load(this._src)\n      .then(image =>\n        this._process(image, {\n          generators: names\n        })\n      )\n      .then(result => {\n        this._result = result\n        return result.palettes\n      })\n      .then(res => {\n        image.remove()\n        if (cb) {\n          cb(undefined, res)\n        }\n        return res\n      })\n      .catch(err => {\n        image.remove()\n        if (cb) {\n          cb(err)\n        }\n        return Promise.reject(err)\n      })\n  }\n}\n","import { Callback } from '@vibrant/types'\nimport { Filter } from '@vibrant/color'\n\nexport type ImageCallback = Callback<Image>\n\nexport type ImageSource = string | HTMLImageElement | Buffer\n\nexport type Pixels = Uint8ClampedArray | Buffer\nexport interface ImageData {\n  data: Pixels,\n  width: number,\n  height: number\n}\n\nexport interface ImageOptions {\n  quality: number\n  maxDimension: number\n}\n\nexport interface Image {\n  load (image: ImageSource): Promise<Image>\n  clear (): void\n  update (imageData: ImageData): void\n  getWidth (): number\n  getHeight (): number\n  resize (targetWidth: number, targetHeight: number, ratio: number): void\n  getPixelCount (): number\n  getImageData (): ImageData\n  remove (): void\n  scaleDown (opts: ImageOptions): void\n}\n\nexport interface ImageClass {\n  new(): Image\n}\n\nexport abstract class ImageBase implements Image {\n  abstract load (image: ImageSource): Promise<ImageBase>\n  abstract clear (): void\n  abstract update (imageData: ImageData): void\n  abstract getWidth (): number\n  abstract getHeight (): number\n  abstract resize (targetWidth: number, targetHeight: number, ratio: number): void\n  abstract getPixelCount (): number\n  abstract getImageData (): ImageData\n  abstract remove (): void\n\n  scaleDown (opts: ImageOptions): void {\n    let width: number = this.getWidth()\n    let height: number = this.getHeight()\n\n    let ratio: number = 1\n\n    if (opts.maxDimension > 0) {\n      let maxSide: number = Math.max(width, height)\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide\n    } else {\n      ratio = 1 / opts.quality\n    }\n\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio)\n  }\n}\n\nexport function applyFilters (imageData: ImageData, filters: Filter[]) {\n  if (filters.length > 0) {\n    let pixels = imageData.data\n    let n = pixels.length / 4\n    let offset\n    let r\n    let g\n    let b\n    let a\n    for (let i = 0; i < n; i++) {\n      offset = i * 4\n      r = pixels[offset + 0]\n      g = pixels[offset + 1]\n      b = pixels[offset + 2]\n      a = pixels[offset + 3]\n      // Mark ignored color\n      for (let j = 0; j < filters.length; j++) {\n        if (!filters[j](r, g, b, a)) {\n          pixels[offset + 3] = 0\n          break\n        }\n      }\n    }\n  }\n\n  return imageData\n}\n","import { rgbToHsl, rgbToHex } from './converter'\n\nexport interface Filter {\n  (red: number, green: number, blue: number, alpha: number): boolean\n}\n\n/**\n * 3d floating pointer vector\n */\nexport type Vec3 = [number, number, number]\n\n/**\n * The layout for a node-vibrant Palette. Allows you to keep track of\n */\nexport interface Palette {\n  Vibrant: Swatch | null\n  Muted: Swatch | null\n  DarkVibrant: Swatch | null\n  DarkMuted: Swatch | null\n  LightVibrant: Swatch | null\n  LightMuted: Swatch | null\n  // ?\n  [name: string]: Swatch | null\n}\n\nexport class Swatch {\n  static applyFilters (colors: Swatch[], filters: Filter[]): Swatch[] {\n    return filters.length > 0\n      ? colors.filter(({ r, g, b }) => {\n        for (let j = 0; j < filters.length; j++) {\n          if (!filters[j](r, g, b, 255)) return false\n        }\n        return true\n      })\n      : colors\n  }\n\n  /**\n   * Make a value copy of a swatch based on a previous one. Returns a new Swatch instance\n   * @param {Swatch} swatch\n   */\n  static clone (swatch: Swatch) {\n    return new Swatch(swatch._rgb, swatch._population)\n  }\n  private _hsl: Vec3\n  private _rgb: Vec3\n  private _yiq: number\n  private _population: number\n  private _hex: string\n\n  /**\n   * The red value in the RGB value\n   */\n  get r (): number {\n    return this._rgb[0]\n  }\n  /**\n   * The green value in the RGB value\n   */\n  get g (): number {\n    return this._rgb[1]\n  }\n  /**\n   * The blue value in the RGB value\n   */\n  get b (): number {\n    return this._rgb[2]\n  }\n  /**\n   * The color value as a rgb value\n   */\n  get rgb (): Vec3 {\n    return this._rgb\n  }\n  /**\n   * The color value as a hsl value\n   */\n  get hsl (): Vec3 {\n    if (!this._hsl) {\n      let [r, g, b] = this._rgb\n      this._hsl = rgbToHsl(r, g, b)\n    }\n    return this._hsl\n  }\n\n  /**\n   * The color value as a hex string\n   */\n  get hex (): string {\n    if (!this._hex) {\n      let [r, g, b] = this._rgb\n      this._hex = rgbToHex(r, g, b)\n    }\n    return this._hex\n  }\n  get population (): number {\n    return this._population\n  }\n\n  /**\n   * Get the JSON object for the swatch\n   */\n  toJSON (): {rgb: Vec3, population: number} {\n    return {\n      rgb: this.rgb,\n      population: this.population\n    }\n  }\n\n  /**\n   * Get the color value as a rgb value\n   * @deprecated Use property instead\n   */\n  // TODO: deprecate internally, use property instead\n  getRgb (): Vec3 {\n    return this._rgb\n  }\n  /**\n   * Get the color value as a hsl value\n   * @deprecated Use property instead\n   */\n  // TODO: deprecate internally, use property instead\n  getHsl (): Vec3 {\n    return this.hsl\n  }\n  /**\n   * @deprecated Use property instead\n   */\n  // TODO: deprecate internally, use property instead\n  getPopulation (): number {\n    return this._population\n  }\n  /**\n   * Get the color value as a hex string\n   * @deprecated Use property instead\n   */\n  // TODO: deprecate internally, use property instead\n  getHex (): string {\n    return this.hex\n  }\n\n  private getYiq (): number {\n    if (!this._yiq) {\n      let rgb = this._rgb\n      this._yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000\n    }\n    return this._yiq\n  }\n\n  private _titleTextColor: string\n  private _bodyTextColor: string\n\n  get titleTextColor () {\n    if (this._titleTextColor) {\n      this._titleTextColor = this.getYiq() < 200 ? '#fff' : '#000'\n    }\n    return this._titleTextColor\n  }\n  get bodyTextColor () {\n    if (this._bodyTextColor) {\n      this._bodyTextColor = this.getYiq() < 150 ? '#fff' : '#000'\n    }\n    return this._bodyTextColor\n  }\n  getTitleTextColor (): string {\n    return this.titleTextColor\n  }\n\n  getBodyTextColor (): string {\n    return this.bodyTextColor\n  }\n\n  constructor (rgb: Vec3, population: number) {\n    this._rgb = rgb\n    this._population = population\n  }\n}\n","import { Vec3 } from './'\n\nexport const DELTAE94_DIFF_STATUS = {\n  NA: 0,\n  PERFECT: 1,\n  CLOSE: 2,\n  GOOD: 10,\n  SIMILAR: 50\n}\n\n/**\n * Converts hex string to RGB\n * @param hex - The hex value you with to get the RGB value of\n * @returns an array in the order of `red, green, blue` numerical values\n */\nexport function hexToRgb (hex: string): Vec3 {\n  let m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\n  if (!m) throw new RangeError(`'${hex}' is not a valid hex color`)\n\n  return [m[1], m[2], m[3]].map((s) => parseInt(s, 16)) as Vec3\n}\n\n/**\n * Given values for an RGB color convert to and return a valid HEX string\n * @param r - Red value in RGB\n * @param g - Green value in RGB\n * @param b - Blue value in RGB\n * @returns a valid hex string with pre-pending pound sign\n */\nexport function rgbToHex (r: number, g: number, b: number): string {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1, 7)\n}\n\n/**\n * Given values for an RGB color convert to and return a valid HSL value\n * @param r - Red value in RGB\n * @param g - Green value in RGB\n * @param b - Blue value in RGB\n * @returns an array in the order of `hue, saturation, light` numerical values\n */\nexport function rgbToHsl (r: number, g: number, b: number): Vec3 {\n  r /= 255\n  g /= 255\n  b /= 255\n  let max = Math.max(r, g, b)\n  let min = Math.min(r, g, b)\n  let h: number = 0\n  let s: number = 0\n  let l = (max + min) / 2\n  if (max !== min) {\n    let d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n\n    h /= 6\n  }\n  return [h, s, l]\n}\n\nexport function hslToRgb (h: number, s: number, l: number): Vec3 {\n  let r: number\n  let g: number\n  let b: number\n\n  function hue2rgb (p: number, q: number, t: number): number {\n    if (t < 0) t += 1\n    if (t > 1) t -= 1\n    if (t < 1 / 6) return p + (q - p) * 6 * t\n    if (t < 1 / 2) return q\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n    return p\n  }\n\n  if (s === 0) {\n    r = g = b = l\n  } else {\n    let q = l < 0.5 ? l * (1 + s) : l + s - (l * s)\n    let p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - (1 / 3))\n  }\n  return [\n    r * 255,\n    g * 255,\n    b * 255\n  ]\n}\n\nexport function rgbToXyz (r: number, g: number, b: number): Vec3 {\n  r /= 255\n  g /= 255\n  b /= 255\n  r = r > 0.04045 ? Math.pow((r + 0.005) / 1.055, 2.4) : r / 12.92\n  g = g > 0.04045 ? Math.pow((g + 0.005) / 1.055, 2.4) : g / 12.92\n  b = b > 0.04045 ? Math.pow((b + 0.005) / 1.055, 2.4) : b / 12.92\n\n  r *= 100\n  g *= 100\n  b *= 100\n\n  let x = r * 0.4124 + g * 0.3576 + b * 0.1805\n  let y = r * 0.2126 + g * 0.7152 + b * 0.0722\n  let z = r * 0.0193 + g * 0.1192 + b * 0.9505\n\n  return [x, y, z]\n}\n\nexport function xyzToCIELab (x: number, y: number, z: number): Vec3 {\n  let REF_X = 95.047\n  let REF_Y = 100\n  let REF_Z = 108.883\n\n  x /= REF_X\n  y /= REF_Y\n  z /= REF_Z\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116\n\n  let L = 116 * y - 16\n  let a = 500 * (x - y)\n  let b = 200 * (y - z)\n\n  return [L, a, b]\n}\n\nexport function rgbToCIELab (r: number, g: number, b: number): Vec3 {\n  let [x, y, z] = rgbToXyz(r, g, b)\n  return xyzToCIELab(x, y, z)\n}\n\nexport function deltaE94 (lab1: Vec3, lab2: Vec3): number {\n  let WEIGHT_L = 1\n  let WEIGHT_C = 1\n  let WEIGHT_H = 1\n\n  let [L1, a1, b1] = lab1\n  let [L2, a2, b2] = lab2\n  let dL = L1 - L2\n  let da = a1 - a2\n  let db = b1 - b2\n\n  let xC1 = Math.sqrt(a1 * a1 + b1 * b1)\n  let xC2 = Math.sqrt(a2 * a2 + b2 * b2)\n\n  let xDL = L2 - L1\n  let xDC = xC2 - xC1\n  let xDE = Math.sqrt(dL * dL + da * da + db * db)\n\n  let xDH = (Math.sqrt(xDE) > Math.sqrt(Math.abs(xDL)) + Math.sqrt(Math.abs(xDC)))\n    ? Math.sqrt(xDE * xDE - xDL * xDL - xDC * xDC)\n    : 0\n\n  let xSC = 1 + 0.045 * xC1\n  let xSH = 1 + 0.015 * xC1\n\n  xDL /= WEIGHT_L\n  xDC /= WEIGHT_C * xSC\n  xDH /= WEIGHT_H * xSH\n\n  return Math.sqrt(xDL * xDL + xDC * xDC + xDH * xDH)\n}\n\nexport function rgbDiff (rgb1: Vec3, rgb2: Vec3): number {\n  let lab1 = rgbToCIELab.apply(undefined, rgb1)\n  let lab2 = rgbToCIELab.apply(undefined, rgb2)\n  return deltaE94(lab1, lab2)\n}\n\nexport function hexDiff (hex1: string, hex2: string): number {\n  let rgb1 = hexToRgb(hex1)\n  let rgb2 = hexToRgb(hex2)\n\n  return rgbDiff(rgb1, rgb2)\n}\n\nexport function getColorDiffStatus (d: number): string {\n  if (d < DELTAE94_DIFF_STATUS.NA) {\n    return 'N/A'\n  }\n  // Not perceptible by human eyes\n  if (d <= DELTAE94_DIFF_STATUS.PERFECT) {\n    return 'Perfect'\n  }\n  // Perceptible through close observation\n  if (d <= DELTAE94_DIFF_STATUS.CLOSE) {\n    return 'Close'\n  }\n  // Perceptible at a glance\n  if (d <= DELTAE94_DIFF_STATUS.GOOD) {\n    return 'Good'\n  }\n  // Colors are more similar than opposite\n  if (d < DELTAE94_DIFF_STATUS.SIMILAR) {\n    return 'Similar'\n  }\n  return 'Wrong'\n\n}\n","import Vibrant from './config'\nimport BrowserImage from '@vibrant/image-browser'\n\nVibrant.DefaultOpts.ImageClass = BrowserImage\n\nexport = Vibrant\n","import Vibrant from '@vibrant/core'\n\nVibrant.DefaultOpts.quantizer = 'mmcq'\nVibrant.DefaultOpts.generators = ['default']\nVibrant.DefaultOpts.filters = ['default']\n\nexport default Vibrant\n","import { Palette, Swatch, Filter } from '@vibrant/color'\nimport { Image, ImageClass, ImageSource, ImageOptions } from '@vibrant/image'\nimport { Quantizer, QuantizerOptions } from '@vibrant/quantizer'\nimport { Generator } from '@vibrant/generator'\nimport { StageOptions, ProcessOptions } from './pipeline'\nimport { assignDeep } from './utils'\n\nexport interface Options extends ImageOptions, QuantizerOptions {\n  useWorker: boolean\n  ImageClass: ImageClass\n  quantizer: string | StageOptions\n  generators: (string | StageOptions)[]\n  filters: string[]\n}\n\nexport function buildProcessOptions (opts: Options, override?: Partial<ProcessOptions>): ProcessOptions {\n  let { colorCount, quantizer, generators, filters } = opts\n  // Merge with common quantizer options\n  let commonQuantizerOpts = { colorCount }\n  let q = typeof quantizer === 'string'\n    ? { name: quantizer, options: {} }\n    : quantizer\n  q.options = assignDeep({}, commonQuantizerOpts, q.options)\n\n  return assignDeep({}, {\n    quantizer: q,\n    generators,\n    filters\n  }, override)\n}\n","import {\n  Options\n} from './options'\nimport {\n  Callback\n} from '@vibrant/types'\nimport {\n  ImageClass,\n  ImageSource\n} from '@vibrant/image'\n\nimport {\n  Filter,\n  Palette\n} from '@vibrant/color'\nimport Vibrant from './'\nimport { assignDeep } from './utils'\n\nexport default class Builder {\n  private _src: ImageSource\n  private _opts: Partial<Options>\n  constructor (src: ImageSource, opts: Partial<Options> = {}) {\n    this._src = src\n    this._opts = assignDeep({}, Vibrant.DefaultOpts, opts)\n  }\n\n  maxColorCount (n: number): Builder {\n    this._opts.colorCount = n\n    return this\n  }\n\n  maxDimension (d: number): Builder {\n    this._opts.maxDimension = d\n    return this\n  }\n\n  addFilter (name: string): Builder {\n    if (!this._opts.filters) {\n      this._opts.filters = [name]\n    } else {\n      this._opts.filters.push(name)\n    }\n    return this\n  }\n\n  removeFilter (name: string): Builder {\n    if (this._opts.filters) {\n      let i = this._opts.filters.indexOf(name)\n      if (i > 0) this._opts.filters.splice(i)\n    }\n    return this\n  }\n\n  clearFilters (): Builder {\n    this._opts.filters = []\n    return this\n  }\n\n  quality (q: number): Builder {\n    this._opts.quality = q\n    return this\n  }\n\n  useImageClass (imageClass: ImageClass): Builder {\n    this._opts.ImageClass = imageClass\n    return this\n  }\n\n  useGenerator (generator: string, options?: any): Builder {\n    if (!this._opts.generators) this._opts.generators = []\n    this._opts.generators.push(options ? { name: generator, options } : generator)\n    return this\n  }\n\n  useQuantizer (quantizer: string, options?: any): Builder {\n    this._opts.quantizer = options ? { name: quantizer, options } : quantizer\n    return this\n  }\n\n  build (): Vibrant {\n    return new Vibrant(this._src, this._opts)\n  }\n\n  getPalette (cb?: Callback<Palette>): Promise<Palette> {\n    return this.build().getPalette(cb)\n  }\n  getSwatches (cb?: Callback<Palette>): Promise<Palette> {\n    return this.build().getPalette(cb)\n  }\n}\n","import {\n  ImageOptions,\n  ImageData as VibrantImageData,\n  ImageSource,\n  ImageCallback,\n  ImageBase\n} from '@vibrant/image'\n\nfunction isRelativeUrl (url: string): boolean {\n  let u = new URL(url, location.href)\n  return u.protocol === location.protocol &&\n    u.host === location.host &&\n    u.port === location.port\n}\n\nfunction isSameOrigin (a: string, b: string): boolean {\n  let ua = new URL(a)\n  let ub = new URL(b)\n\n  // https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\n  return (\n    ua.protocol === ub.protocol &&\n    ua.hostname === ub.hostname &&\n    ua.port === ub.port\n  )\n}\n\nexport default class BrowserImage extends ImageBase {\n  image: HTMLImageElement\n  private _canvas: HTMLCanvasElement\n  private _context: CanvasRenderingContext2D\n  private _width: number\n  private _height: number\n  private _initCanvas (): void {\n    const img = this.image\n    const canvas = (this._canvas = document.createElement('canvas'))\n    const context = (canvas.getContext('2d'))\n\n    if (!context) throw new ReferenceError('Failed to create canvas context')\n\n    this._context = context\n\n    canvas.className = '@vibrant/canvas'\n    canvas.style.display = 'none'\n\n    this._width = canvas.width = img.width\n    this._height = canvas.height = img.height\n\n    context.drawImage(img, 0, 0)\n\n    document.body.appendChild(canvas)\n  }\n  load (image: ImageSource): Promise<ImageBase> {\n    let img: HTMLImageElement\n    let src: string\n    if (typeof image === 'string') {\n      img = document.createElement('img')\n      src = image\n\n      if (!isRelativeUrl(src) && !isSameOrigin(window.location.href, src)) {\n        img.crossOrigin = 'anonymous'\n      }\n\n      img.src = src\n    } else if (image instanceof HTMLImageElement) {\n      img = image\n      src = image.src\n    } else {\n      return Promise.reject(\n        new Error(`Cannot load buffer as an image in browser`)\n      )\n    }\n    this.image = img\n\n    return new Promise<ImageBase>((resolve, reject) => {\n      let onImageLoad = () => {\n        this._initCanvas()\n        resolve(this)\n      }\n\n      if (img.complete) {\n        // Already loaded\n        onImageLoad()\n      } else {\n        img.onload = onImageLoad\n        img.onerror = e => reject(new Error(`Fail to load image: ${src}`))\n      }\n    })\n  }\n  clear (): void {\n    this._context.clearRect(0, 0, this._width, this._height)\n  }\n  update (imageData: VibrantImageData): void {\n    this._context.putImageData(imageData as ImageData, 0, 0)\n  }\n  getWidth (): number {\n    return this._width\n  }\n  getHeight (): number {\n    return this._height\n  }\n  resize (targetWidth: number, targetHeight: number, ratio: number): void {\n    let { _canvas: canvas, _context: context, image: img } = this\n\n    this._width = canvas.width = targetWidth\n    this._height = canvas.height = targetHeight\n\n    context.scale(ratio, ratio)\n    context.drawImage(img, 0, 0)\n  }\n  getPixelCount (): number {\n    return this._width * this._height\n  }\n  getImageData (): ImageData {\n    return this._context.getImageData(0, 0, this._width, this._height)\n  }\n  remove (): void {\n    if (this._canvas && this._canvas.parentNode) {\n      this._canvas.parentNode.removeChild(this._canvas)\n    }\n  }\n}\n","import Vibrant = require('./browser')\nimport pipeline from './pipeline'\n\nVibrant.use(pipeline)\n\nexport = Vibrant\n","import MMCQ from '@vibrant/quantizer-mmcq'\nimport DefaultGenerator from '@vibrant/generator-default'\n\nimport { BasicPipeline } from '@vibrant/core/lib/pipeline'\n\nconst pipeline = new BasicPipeline()\n  .filter.register('default', (r: number, g: number, b: number, a: number) =>\n    a >= 125\n    && !(r > 250 && g > 250 && b > 250)\n  )\n  .quantizer.register('mmcq', MMCQ)\n  .generator.register('default', DefaultGenerator)\n\nexport default pipeline\n","import { Quantizer, QuantizerOptions } from '@vibrant/quantizer'\nimport {\n  Pixels\n} from '@vibrant/image'\nimport { Filter, Swatch } from '@vibrant/color'\nimport VBox from './vbox'\nimport PQueue from './pqueue'\n\nconst fractByPopulations = 0.75\n\nfunction _splitBoxes (pq: PQueue<VBox>, target: number): void {\n  let lastSize = pq.size()\n  while (pq.size() < target) {\n    let vbox = pq.pop()\n\n    if (vbox && vbox.count() > 0) {\n      let [vbox1, vbox2] = vbox.split()\n\n      pq.push(vbox1)\n      if (vbox2 && vbox2.count() > 0) pq.push(vbox2)\n\n      // No more new boxes, converged\n      if (pq.size() === lastSize) {\n        break\n      } else {\n        lastSize = pq.size()\n      }\n    } else {\n      break\n    }\n  }\n}\n\nconst MMCQ = (pixels: Pixels, opts: QuantizerOptions): Array<Swatch> => {\n  if (pixels.length === 0 || opts.colorCount < 2 || opts.colorCount > 256) {\n    throw new Error('Wrong MMCQ parameters')\n  }\n\n  let vbox = VBox.build(pixels)\n  let colorCount = vbox.histogram.colorCount\n  let pq = new PQueue<VBox>((a, b) => a.count() - b.count())\n\n  pq.push(vbox)\n\n  // first set of colors, sorted by population\n  _splitBoxes(pq, fractByPopulations * opts.colorCount)\n\n  // Re-order\n  let pq2 = new PQueue<VBox>((a, b) => a.count() * a.volume() - b.count() * b.volume())\n  pq2.contents = pq.contents\n\n  // next set - generate the median cuts using the (npix * vol) sorting.\n  _splitBoxes(pq2, opts.colorCount - pq2.size())\n\n  // calculate the actual colors\n  return generateSwatches(pq2)\n}\n\nfunction generateSwatches (pq: PQueue<VBox>) {\n  let swatches: Swatch[] = []\n  while (pq.size()) {\n    let v = pq.pop()!\n    let color = v.avg()\n    let [r, g, b] = color\n    swatches.push(new Swatch(color, v.count()))\n  }\n  return swatches\n}\n\nexport default MMCQ\n","import { Vec3, Filter } from '@vibrant/color'\nimport { Pixels } from '@vibrant/image'\nimport Histogram from '@vibrant/image/lib/histogram'\nexport interface Dimension {\n  r1: number\n  r2: number\n  g1: number\n  g2: number\n  b1: number\n  b2: number\n  [d: string]: number\n}\n\nconst SIGBITS = 5\nconst RSHIFT = 8 - SIGBITS\n\nexport default class VBox {\n  static build (pixels: Pixels): VBox {\n    let h = new Histogram(pixels, { sigBits: SIGBITS })\n    let { rmin, rmax, gmin, gmax, bmin, bmax } = h\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, h)\n  }\n\n  dimension: Dimension\n\n  private _volume = -1\n  private _avg: Vec3 | null\n  private _count = -1\n\n  constructor (\n    r1: number, r2: number,\n    g1: number, g2: number,\n    b1: number, b2: number,\n    public histogram: Histogram\n  ) {\n    // NOTE: dimension will be mutated by split operation.\n    //       It must be specified explicitly, not from histogram\n    this.dimension = { r1, r2, g1, g2, b1, b2 }\n  }\n\n  invalidate (): void {\n    this._volume = this._count = -1\n    this._avg = null\n  }\n\n  volume (): number {\n    if (this._volume < 0) {\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1)\n    }\n    return this._volume\n  }\n\n  count (): number {\n    if (this._count < 0) {\n      let { hist, getColorIndex } = this.histogram\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let c = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            c += hist[index]\n          }\n        }\n      }\n      this._count = c\n    }\n    return this._count\n  }\n\n  clone (): VBox {\n    let { histogram } = this\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    return new VBox(r1, r2, g1, g2, b1, b2, histogram)\n  }\n\n  avg (): Vec3 {\n    if (!this._avg) {\n      let { hist, getColorIndex } = this.histogram\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let ntot = 0\n      let mult = 1 << (8 - SIGBITS)\n      let rsum: number\n      let gsum: number\n      let bsum: number\n      rsum = gsum = bsum = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            let h = hist[index]\n            ntot += h\n            rsum += (h * (r + 0.5) * mult)\n            gsum += (h * (g + 0.5) * mult)\n            bsum += (h * (b + 0.5) * mult)\n          }\n        }\n      }\n      if (ntot) {\n        this._avg = [\n          ~~(rsum / ntot),\n          ~~(gsum / ntot),\n          ~~(bsum / ntot)\n        ]\n      } else {\n        this._avg = [\n          ~~(mult * (r1 + r2 + 1) / 2),\n          ~~(mult * (g1 + g2 + 1) / 2),\n          ~~(mult * (b1 + b2 + 1) / 2)\n        ]\n      }\n\n    }\n    return this._avg\n  }\n\n  contains (rgb: Vec3): boolean {\n    let [r, g, b] = rgb\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    r >>= RSHIFT\n    g >>= RSHIFT\n    b >>= RSHIFT\n\n    return r >= r1 && r <= r2\n      && g >= g1 && g <= g2\n      && b >= b1 && b <= b2\n  }\n\n  split (): VBox[] {\n    let { hist, getColorIndex } = this.histogram\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    let count = this.count()\n    if (!count) return []\n    if (count === 1) return [this.clone()]\n    let rw = r2 - r1 + 1\n    let gw = g2 - g1 + 1\n    let bw = b2 - b1 + 1\n\n    let maxw = Math.max(rw, gw, bw)\n    let accSum: Uint32Array | null = null\n    let sum: number\n    let total: number\n    sum = total = 0\n\n    let maxd: 'r' | 'g' | 'b' | null = null\n\n    if (maxw === rw) {\n      maxd = 'r'\n      accSum = new Uint32Array(r2 + 1)\n      for (let r = r1; r <= r2; r++) {\n        sum = 0\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[r] = total\n      }\n    } else if (maxw === gw) {\n      maxd = 'g'\n      accSum = new Uint32Array(g2 + 1)\n      for (let g = g1; g <= g2; g++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[g] = total\n      }\n    } else {\n      maxd = 'b'\n      accSum = new Uint32Array(b2 + 1)\n      for (let b = b1; b <= b2; b++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let g = g1; g <= g2; g++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[b] = total\n      }\n    }\n\n    let splitPoint = -1\n    let reverseSum = new Uint32Array(accSum.length)\n    for (let i = 0; i < accSum.length; i++) {\n      let d = accSum[i]\n      if (splitPoint < 0 && d > total / 2) splitPoint = i\n      reverseSum[i] = total - d\n    }\n\n    let vbox = this\n\n    function doCut (d: string): VBox[] {\n      let dim1 = d + '1'\n      let dim2 = d + '2'\n      let d1 = vbox.dimension[dim1]\n      let d2 = vbox.dimension[dim2]\n      let vbox1 = vbox.clone()\n      let vbox2 = vbox.clone()\n      let left = splitPoint - d1\n      let right = d2 - splitPoint\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2))\n        d2 = Math.max(0, d2)\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2))\n        d2 = Math.min(vbox.dimension[dim2], d2)\n      }\n\n      while (!accSum![d2]) d2++\n\n      let c2 = reverseSum[d2]\n      while (!c2 && accSum![d2 - 1]) c2 = reverseSum[--d2]\n\n      vbox1.dimension[dim2] = d2\n      vbox2.dimension[dim1] = d2 + 1\n\n      return [vbox1, vbox2]\n    }\n\n    return doCut(maxd)\n  }\n\n}\n","import { Pixels } from './index'\n\nexport interface HistogramOptions {\n  sigBits: number\n}\n\nexport default class Histogram {\n  bmin: number\n  bmax: number\n  gmin: number\n  gmax: number\n  rmin: number\n  rmax: number\n  hist: Uint32Array\n  private _colorCount: number\n  get colorCount () { return this._colorCount }\n  getColorIndex: (r: number, g: number, b: number) => number\n  constructor (public pixels: Pixels, public opts: HistogramOptions) {\n    const { sigBits } = opts\n    const getColorIndex = (r: number, g: number, b: number) =>\n      (r << (2 * sigBits)) + (g << sigBits) + b\n\n    this.getColorIndex = getColorIndex\n\n    const rshift = 8 - sigBits\n    const hn = 1 << (3 * sigBits)\n    let hist = new Uint32Array(hn)\n    let rmax: number\n    let rmin: number\n    let gmax: number\n    let gmin: number\n    let bmax: number\n    let bmin: number\n    let r: number\n    let g: number\n    let b: number\n    let a: number\n    rmax = gmax = bmax = 0\n    rmin = gmin = bmin = Number.MAX_VALUE\n    let n = pixels.length / 4\n    let i = 0\n\n    while (i < n) {\n\n      let offset = i * 4\n      i++\n      r = pixels[offset + 0]\n      g = pixels[offset + 1]\n      b = pixels[offset + 2]\n      a = pixels[offset + 3]\n\n      // Ignored pixels' alpha is marked as 0 in filtering stage\n      if (a === 0) continue\n\n      r = r >> rshift\n      g = g >> rshift\n      b = b >> rshift\n\n      let index = getColorIndex(r, g, b)\n      hist[index] += 1\n\n      if (r > rmax) rmax = r\n      if (r < rmin) rmin = r\n      if (g > gmax) gmax = g\n      if (g < gmin) gmin = g\n      if (b > bmax) bmax = b\n      if (b < bmin) bmin = b\n    }\n    this._colorCount = hist.reduce((total, c) => c > 0 ? total + 1 : total, 0)\n    this.hist = hist\n    this.rmax = rmax\n    this.rmin = rmin\n    this.gmax = gmax\n    this.gmin = gmin\n    this.bmax = bmax\n    this.bmin = bmin\n  }\n}\n","export interface PQueueComparator<T> {\n  (a: T, b: T): number\n}\n\nexport default class PQueue<T> {\n  contents: T[]\n  private _sorted: boolean\n  private _comparator: PQueueComparator<T>\n  private _sort (): void {\n    if (!this._sorted) {\n      this.contents.sort(this._comparator)\n      this._sorted = true\n    }\n  }\n\n  constructor (comparator: PQueueComparator<T>) {\n    this._comparator = comparator\n    this.contents = []\n    this._sorted = false\n  }\n\n  push (item: T): void {\n    this.contents.push(item)\n    this._sorted = false\n  }\n\n  peek (index?: number): T {\n    this._sort()\n    index = typeof index === 'number' ? index : this.contents.length - 1\n    return this.contents[index]\n  }\n\n  pop () {\n    this._sort()\n    return this.contents.pop()\n  }\n\n  size (): number {\n    return this.contents.length\n  }\n\n  map<U> (mapper: (item: T, index: number) => any): U[] {\n    this._sort()\n    return this.contents.map(mapper)\n  }\n}\n","import { Swatch, Palette } from '@vibrant/color'\nimport { Generator } from '@vibrant/generator'\nimport { hslToRgb } from '@vibrant/color/lib/converter'\n\ninterface DefaultGeneratorOptions {\n  targetDarkLuma: number,\n  maxDarkLuma: number,\n  minLightLuma: number,\n  targetLightLuma: number,\n  minNormalLuma: number,\n  targetNormalLuma: number,\n  maxNormalLuma: number,\n  targetMutesSaturation: number,\n  maxMutesSaturation: number,\n  targetVibrantSaturation: number,\n  minVibrantSaturation: number,\n  weightSaturation: number,\n  weightLuma: number,\n  weightPopulation: number\n}\n\nconst DefaultOpts: DefaultGeneratorOptions = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n}\n\nfunction _findMaxPopulation (swatches: Array<Swatch>): number {\n  let p = 0\n\n  swatches.forEach((s) => {\n    p = Math.max(p, s.population)\n  })\n\n  return p\n}\n\nfunction _isAlreadySelected (palette: Palette, s: Swatch): boolean {\n  return palette.Vibrant === s\n    || palette.DarkVibrant === s\n    || palette.LightVibrant === s\n    || palette.Muted === s\n    || palette.DarkMuted === s\n    || palette.LightMuted === s\n}\n\nfunction _createComparisonValue (\n  saturation: number, targetSaturation: number,\n  luma: number, targetLuma: number,\n  population: number, maxPopulation: number, opts: DefaultGeneratorOptions): number {\n\n  function weightedMean (...values: number[]) {\n    let sum = 0\n    let weightSum = 0\n    for (let i = 0; i < values.length; i += 2) {\n      let value = values[i]\n      let weight = values[i + 1]\n      sum += value * weight\n      weightSum += weight\n    }\n\n    return sum / weightSum\n  }\n\n  function invertDiff (value: number, targetValue: number): number {\n    return 1 - Math.abs(value - targetValue)\n  }\n\n  return weightedMean(\n    invertDiff(saturation, targetSaturation), opts.weightSaturation,\n    invertDiff(luma, targetLuma), opts.weightLuma,\n    population / maxPopulation, opts.weightPopulation\n  )\n\n}\n\nfunction _findColorVariation (palette: Palette, swatches: Array<Swatch>, maxPopulation: number,\n  targetLuma: number,\n  minLuma: number,\n  maxLuma: number,\n  targetSaturation: number,\n  minSaturation: number,\n  maxSaturation: number,\n  opts: DefaultGeneratorOptions): Swatch | null {\n\n  let max: Swatch | null = null\n  let maxValue = 0\n\n  swatches.forEach((swatch) => {\n    let [, s, l] = swatch.hsl\n\n    if (s >= minSaturation && s <= maxSaturation\n      && l >= minLuma && l <= maxLuma\n      && !_isAlreadySelected(palette, swatch)\n    ) {\n      let value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.population, maxPopulation, opts)\n\n      if (max === null || value > maxValue) {\n        max = swatch\n        maxValue = value\n      }\n\n    }\n  })\n\n  return max\n}\n\nfunction _generateVariationColors (swatches: Array<Swatch>, maxPopulation: number, opts: DefaultGeneratorOptions): Palette {\n  let palette: Palette = {\n    Vibrant: null,\n    DarkVibrant: null,\n    LightVibrant: null,\n    Muted: null,\n    DarkMuted: null,\n    LightMuted: null\n  }\n  // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetNormalLuma,\n    opts.minNormalLuma,\n    opts.maxNormalLuma,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetLightLuma,\n    opts.minLightLuma,\n    1,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetDarkLuma,\n    0,\n    opts.maxDarkLuma,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetNormalLuma,\n    opts.minNormalLuma,\n    opts.maxNormalLuma,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetLightLuma,\n    opts.minLightLuma,\n    1,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetDarkLuma,\n    0,\n    opts.maxDarkLuma,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  return palette\n}\n\nfunction _generateEmptySwatches (palette: Palette, maxPopulation: number, opts: DefaultGeneratorOptions): void {\n  if (!palette.Vibrant && !palette.DarkVibrant && !palette.LightVibrant) {\n    if (!palette.DarkVibrant && palette.DarkMuted) {\n      let [h, s, l] = palette.DarkMuted.hsl\n      l = opts.targetDarkLuma\n      palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n    }\n    if (!palette.LightVibrant && palette.LightMuted) {\n      let [h, s, l] = palette.LightMuted.hsl\n      l = opts.targetDarkLuma\n      palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n    }\n  }\n  if (!palette.Vibrant && palette.DarkVibrant) {\n    let [h, s, l] = palette.DarkVibrant.hsl\n    l = opts.targetNormalLuma\n    palette.Vibrant = new Swatch(hslToRgb(h, s, l), 0)\n  } else if (!palette.Vibrant && palette.LightVibrant) {\n    let [h, s, l] = palette.LightVibrant.hsl\n    l = opts.targetNormalLuma\n    palette.Vibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (!palette.DarkVibrant && palette.Vibrant) {\n    let [h, s, l] = palette.Vibrant.hsl\n    l = opts.targetDarkLuma\n    palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (!palette.LightVibrant && palette.Vibrant) {\n    let [h, s, l] = palette.Vibrant.hsl\n    l = opts.targetLightLuma\n    palette.LightVibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (!palette.Muted && palette.Vibrant) {\n    let [h, s, l] = palette.Vibrant.hsl\n    l = opts.targetMutesSaturation\n    palette.Muted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (!palette.DarkMuted && palette.DarkVibrant) {\n    let [h, s, l] = palette.DarkVibrant.hsl\n    l = opts.targetMutesSaturation\n    palette.DarkMuted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (!palette.LightMuted && palette.LightVibrant) {\n    let [h, s, l] = palette.LightVibrant.hsl\n    l = opts.targetMutesSaturation\n    palette.LightMuted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n}\n\nconst DefaultGenerator: Generator = (swatches: Array<Swatch>, opts?: DefaultGeneratorOptions): Palette => {\n  opts = Object.assign({}, DefaultOpts, opts)\n  let maxPopulation = _findMaxPopulation(swatches)\n\n  let palette = _generateVariationColors(swatches, maxPopulation, opts)\n  _generateEmptySwatches(palette, maxPopulation, opts)\n\n  return palette\n}\n\nexport default DefaultGenerator\n","import { ImageData, applyFilters } from '@vibrant/image'\nimport { Quantizer } from '@vibrant/quantizer'\nimport { Generator } from '@vibrant/generator'\nimport { Palette, Swatch, Filter } from '@vibrant/color'\n\nexport class Stage<T> {\n  private _map: { [name: string]: T } = {}\n  constructor (protected pipeline: BasicPipeline) { }\n  names () {\n    return Object.keys(this._map)\n  }\n  has (name: string) {\n    return !!this._map[name]\n  }\n  get (name: string) {\n    return this._map[name]\n  }\n  register (name: string, stageFn: T) {\n    this._map[name] = stageFn\n    return this.pipeline\n  }\n}\n\nexport interface ProcessResult {\n  colors: Swatch[]\n  palettes: { [name: string]: Palette }\n}\n\nexport interface StageOptions {\n  name: string\n  options?: any\n}\n\nexport interface ProcessOptions {\n  filters: string[]\n  quantizer: string | StageOptions\n  generators: (string | StageOptions)[]\n}\n\ninterface StageTask<Q> {\n  name: string\n  fn: Q\n  options?: any\n}\n\ninterface ProcessTasks {\n  filters: StageTask<Filter>[]\n  quantizer: StageTask<Quantizer>\n  generators: StageTask<Generator>[]\n}\n\nexport interface Pipeline {\n  // quantizer: Stage<Quantizer>\n  // generator: Stage<Generator>\n  process (imageData: ImageData, opts: ProcessOptions): Promise<ProcessResult>\n}\n\nexport class BasicPipeline implements Pipeline {\n  private _buildProcessTasks ({\n    filters,\n    quantizer,\n    generators\n  }: ProcessOptions): ProcessTasks {\n    // Support wildcard for generators\n    if (generators.length === 1 && generators[0] === '*') {\n      generators = this.generator.names()\n    }\n    return {\n      filters: filters.map(f => createTask(this.filter, f)),\n      quantizer: createTask(this.quantizer, quantizer),\n      generators: generators.map(g => createTask(this.generator, g))\n    }\n    function createTask<Q> (\n      stage: Stage<Q>,\n      o: string | StageOptions\n    ): StageTask<Q> {\n      let name: string\n      let options: any\n      if (typeof o === 'string') {\n        name = o\n      } else {\n        name = o.name\n        options = o.options\n      }\n\n      return {\n        name,\n        fn: stage.get(name),\n        options\n      }\n    }\n  }\n  filter: Stage<Filter> = new Stage(this)\n  quantizer: Stage<Quantizer> = new Stage(this)\n  generator: Stage<Generator> = new Stage(this)\n  async process (\n    imageData: ImageData,\n    opts: ProcessOptions\n  ): Promise<ProcessResult> {\n    let { filters, quantizer, generators } = this._buildProcessTasks(opts)\n    const imageFilterData = await this._filterColors(filters, imageData)\n    const colors = await this._generateColors(quantizer, imageFilterData)\n    const palettes = await this._generatePalettes(generators, colors)\n    return {\n      colors,\n      palettes\n    }\n  }\n  private _filterColors (filters: StageTask<Filter>[], imageData: ImageData) {\n    return Promise.resolve(\n      applyFilters(imageData, filters.map(({ fn }) => fn))\n    )\n  }\n  private _generateColors (\n    quantizer: StageTask<Quantizer>,\n    imageData: ImageData\n  ) {\n    return Promise.resolve(quantizer.fn(imageData.data, quantizer.options))\n  }\n  private async _generatePalettes (\n    generators: StageTask<Generator>[],\n    colors: Swatch[]\n  ) {\n    // Make a promise map that will run them \"concurrently\" (but return in expected result)\n    const promiseArr = await Promise.all(\n      generators.map(({ fn, options }) => Promise.resolve(fn(colors, options)))\n    )\n    // Map the values to the expected name\n    return Promise.resolve(\n      promiseArr.reduce(\n        (promises, promiseVal, i) => {\n          promises[generators[i].name] = promiseVal\n          return promises\n        },\n        {} as { [name: string]: Palette }\n      )\n    )\n  }\n}\n"],"names":[],"version":3,"file":"gallery.56c5600e.js.map","sourceRoot":"/__parcel_source_root/"}